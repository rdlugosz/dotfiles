" vim: set ft=vim
set nocompatible               " be iMproved

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETUP VUNDLE PACKAGE MANAGER
" # !> possibly useless use of a literal in void context
" if Vundle is not installed, see: https://github.com/gmarik/vundle
" or just: git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
"
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

if exists(':Bundle')
  " let Vundle manage Vundle
  " required!
  Bundle 'gmarik/vundle'

  " Activate the built-in matchit.vim
  runtime macros/matchit.vim

  " The Tim Pope all-star collection
  Bundle 'tpope/vim-cucumber'
  Bundle 'tpope/vim-fugitive'
  Bundle 'tpope/vim-repeat'
  Bundle 'tpope/vim-sensible'
  Bundle 'tpope/vim-speeddating'
  Bundle 'tpope/vim-surround'
  Bundle 'tpope/vim-unimpaired'

  "" Interface enhancements
  Bundle 'tpope/vim-vinegar'
  Bundle 'jeetsukumaran/vim-buffergator'
  Bundle 'tpope/vim-characterize'
  Bundle 'kien/ctrlp.vim'
  Bundle 'Lokaltog/vim-easymotion'
  if exists("*gettabvar")
    Bundle 'airblade/vim-gitgutter'
  endif
  Bundle 'scrooloose/nerdtree'
  Bundle 'ervandew/supertab'
  Bundle 'godlygeek/tabular'
  Bundle 'nelstrom/vim-visual-star-search'
  Bundle 'vim-scripts/ZoomWin'
  Bundle 'mileszs/ack.vim'
  Bundle 'michaeljsmith/vim-indent-object'
  Bundle 'bling/vim-airline'
  Bundle 'rdlugosz/vim-dragvisuals'
  Bundle 'mbbill/undotree'

  " Colorschemes
  Bundle 'altercation/vim-colors-solarized.git'
  Bundle 'tpope/vim-vividchalk'
  Bundle 'vim-scripts/Zenburn'
  Bundle 'chriskempson/base16-vim'
  Bundle 'nanotech/jellybeans.vim'
  Bundle 'junegunn/seoul256.vim'
  Bundle 'tomasr/molokai'

  " Language support
  Bundle 'tpope/vim-commentary'
  Bundle 'kchmck/vim-coffee-script'
  Bundle 'guns/vim-clojure-static'
  Bundle 'elixir-lang/vim-elixir'
  Bundle 'tpope/vim-endwise'
  Bundle 'tpope/vim-git'
  Bundle 'jnwhiteh/vim-golang'
  Bundle 'tpope/vim-haml'
  Bundle 'pangloss/vim-javascript'
  Bundle 'groenewege/vim-less'
  Bundle 'tpope/vim-markdown'
  Bundle 'mmalecki/vim-node.js'
  Bundle 'ajf/puppet-vim'
  Bundle 'tpope/vim-rails'
  Bundle 'tpope/vim-rake'
  Bundle 'skwp/vim-rspec'
  Bundle 'skalnik/vim-vroom'
  Bundle 'vim-ruby/vim-ruby'
  Bundle 'rosstimson/scala-vim-support'
  Bundle 'cakebaker/scss-syntax.vim'
  Bundle 'scrooloose/syntastic'
  Bundle 'tpope/vim-rbenv'
  Bundle 't9md/vim-ruby-xmpfilter'
  Bundle 'rizzatti/funcoo.vim'
  Bundle 'rizzatti/dash.vim'
  Bundle 'AndrewRadev/splitjoin.vim'
  Bundle 'ecomba/vim-ruby-refactoring'
  Bundle 'chrisbra/csv.vim'

  " Add a text object for Ruby blocks (ar / ir)
  Bundle 'kana/vim-textobj-user'
  Bundle 'nelstrom/vim-textobj-rubyblock'

  " Snippets are kind of languagey, but in own section
  " to make it clear snipmate depends on tlib and mw-utils.
  Bundle "MarcWeber/vim-addon-mw-utils"
  Bundle "tomtom/tlib_vim"
  Bundle 'garbas/vim-snipmate'
  Bundle 'honza/vim-snippets'

  " Lols
  Bundle 'koron/nyancat-vim'

  filetype plugin indent on     " required!
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" END VUNDLE CONFIG
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS
"
" Note: most typical defaults handled by tpope/vim-sensible
" see https://github.com/tpope/vim-sensible
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set colorscheme
if $TERM =~ "-256color"
  set t_Co=256
endif
set background=dark
silent! colorscheme zenburn

set swapfile
set directory=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp

set backup
set backupdir=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp

if has('persistent_undo')
  set undodir=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp
  set undofile
  set undoreload=10000
end
set undolevels=10000

set spelllang=en
set spellfile=$HOME/.vim/en.utf-8.add
set spell

if exists('+relativenumber')
  set relativenumber
end
set number       " set after rnu creates 'hybrid' line numbering mode


set lbr          " wrap at word boundaries
set nowrap       " don't wrap lines
set tabstop=2    " a tab is two spaces
set shiftwidth=2 " an autoindent (with <<) is two spaces
set expandtab    " use spaces, not tabs

set list         " Show invisible characters
let &listchars = "tab:>-,trail:\u2591,extends:>,precedes:<,nbsp:\u00b7"
set sidescroll=1

set nohlsearch   " don't highlight matches
set incsearch    " incremental searching
set ignorecase   " searches are case insensitive...
set smartcase    " ... unless they contain at least one capital letter

set showcmd      " show commands as they are typed

" show $ marker at the boundary of cw
set cpoptions+=$

" allow modified buffers to be hidden
set hidden

" exclusions from the autocomplete menu
set wildignore+=*/tmp/*

" mouse works in most terminal software we use...
set mouse=a

" change the cursor shape depending on mode
" see: http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" vim-airline customizations
set noshowmode " Hide mode line text since it's already in Airline
let g:airline#extensions#tabline#enabled = 1
if has("unix")
  let s:uname = system("uname -s")
  if s:uname == "Darwin\n"
    " Assume that if we are on OS X then we have the powerline fonts
    " (because it is probably our own system).
    let g:airline_powerline_fonts = 1
  endif
endif

" The Silver Searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

  " Skip caching since ag is so fast
  let g:ctrlp_use_caching = 0

  " Use ag in ack.vim
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_full_redraws = 1

if &diff
  set wrap
endif

" Use par to reflow text
" see: http://vimcasts.org/episodes/formatting-text-with-par/
" Using `gw` will reflow with Vim's built-in algorithm.
if executable('par')
  set formatprg="par -h -w78 -B=.,\?_A_a "
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let spacebar double as our leader, for great justice
map <space> <leader>
map <space><space> <leader><leader>

" Quick ESC
imap kj <ESC>

" Reload our config
nmap <leader>~ :source ~/.vimrc<CR>:redraw<CR>:echo "~/.vimrc reloaded!"<CR>

" Write file
nmap <leader>w :w<CR>

" Close buffer
nmap <leader>q :bd<CR>

" Toggle spelling
nmap <leader>s :set invspell<CR>:set spell?<CR>

" Toggle wrap
nmap <leader>W :set invwrap<CR>:set wrap?<CR>

" Toggle Cursor Column
nmap <leader>c :set invcursorcolumn<CR>

" Toggle paste mode
nmap <leader>p :set invpaste<CR>:set paste?<CR>
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" upper/lower word
nmap <leader>U mQviwU`Q
nmap <leader>L mQviwu`Q

" Insert the Ruby hashrocket with <c-l>
imap <c-l> <space>=><space>

" Reindent the entire file
nmap <leader>= gg=G``:echo "reindent global"<CR>

" map j to gj and k to gk, so line navigation ignores line wrap
nmap j gj
nmap k gk

" make Y behave similarly to D and C
nnoremap Y y$

" delete trailing whitespace with F5
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Expand %% into the directory of the current file
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Emacs-like beginning and end of line.
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" Navigate splits more easily
map <C-h> <C-w>h
map <C-j> <C-w>j
map <c-k> <C-w>k
map <C-l> <C-w>l

" Toggle match highlight
map <leader>l :set invhlsearch<CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

command! Q q " Bind :Q to :q
command! W w " Bind :W to :w
command! Qall qall

" Allow writing via sudo
cnoremap w!! w !sudo tee > /dev/null %

" NERDTree stuff
map <leader>n :NERDTreeToggle<CR>
let NERDTreeHijackNetrw=0

" UndoTree
nmap <leader>u :UndotreeToggle<CR>

" Fugitive mappings
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gp :Git push<cr>

" Use Marked.app to preview Markdown files...
" http://stackoverflow.com/questions/9212340/is-there-a-vim-plugin-for-preview-markdown-file
function! s:setupMarkup()
  nnoremap <leader>M :silent !open -a Marked.app '%:p'<CR>:redraw!<CR>
endfunction

au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Mappings for vim-ruby-xmpfilter
if executable('xmpfilter')
  autocmd FileType ruby nmap <buffer> <leader>m <Plug>(xmpfilter-mark)
  autocmd FileType ruby xmap <buffer> <leader>m <Plug>(xmpfilter-mark)
  autocmd FileType ruby imap <buffer> <leader>m <Plug>(xmpfilter-mark)
  autocmd FileType ruby nmap <buffer> <leader>x <Plug>(xmpfilter-run)
  autocmd FileType ruby xmap <buffer> <leader>x <Plug>(xmpfilter-run)
  autocmd FileType ruby imap <buffer> <leader>x <Plug>(xmpfilter-run)
endif

" enable spell checking on certain files
autocmd BufNewFile,BufRead COMMIT_EDITMSG set spell

" Key mappings for vim-dragvisuals
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()

" ---------------
" Tabular
" ---------------
nnoremap <Leader>t= :Tabularize assignment<CR>
vnoremap <Leader>t= :Tabularize assignment<CR>
nnoremap <Leader>t: :Tabularize symbol<CR>
vnoremap <Leader>t: :Tabularize symbol<CR>
nnoremap <Leader>t, :Tabularize comma<CR>
vnoremap <Leader>t, :Tabularize comma<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILE TYPES
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Some file types should wrap their text
function! s:setupWrapping()
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction

" Make sure all mardown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
au FileType markdown call s:setupWrapping()

" Treat JSON files like JavaScript
au BufNewFile,BufRead *.json set ft=javascript

"====[ Make the 81st column stand out ]====================

" just the 81st column of wide lines...
" highlight ColorColumn ctermbg=magenta
" call matchadd('ColorColumn', '\%81v', 100)

"=====[ Highlight matches when jumping to next ]=============

" This rewires n and N to do the highlighing...
nnoremap <silent> n   n:call HLNext(0.2)<cr>
nnoremap <silent> N   N:call HLNext(0.2)<cr>

function! HLNext (blinktime)
  highlight WhiteOnRed ctermfg=white ctermbg=red
  let [bufnum, lnum, col, off] = getpos('.')
  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
  let target_pat = '\c\%#'.@/
  let ring = matchadd('WhiteOnRed', target_pat, 101)
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  call matchdelete(ring)
  redraw
endfunction

