set nocompatible               " be iMproved

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETUP VUNDLE PACKAGE MANAGER
" # !> possibly useless use of a literal in void context
" if Vundle is not installed, see: https://github.com/gmarik/vundle
" or just: git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
"
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

if exists(':Bundle')
  " let Vundle manage Vundle
  " required!
  Bundle 'gmarik/vundle'

  " The Tim Pope all-star collection
  Bundle 'tpope/vim-cucumber'
  Bundle 'tpope/vim-fugitive'
  Bundle 'tpope/vim-repeat'
  Bundle 'tpope/vim-sensible'
  Bundle 'tpope/vim-speeddating'
  Bundle 'tpope/vim-surround'
  Bundle 'tpope/vim-unimpaired'

  "" Interface enhancements
  Bundle 'jeetsukumaran/vim-buffergator'
  Bundle 'tpope/vim-characterize'
  Bundle 'kien/ctrlp.vim'
  Bundle 'Lokaltog/vim-easymotion'
  Bundle 'airblade/vim-gitgutter'
  Bundle 'scrooloose/nerdcommenter'
  Bundle 'scrooloose/nerdtree'
  Bundle 'ervandew/supertab'
  Bundle 'godlygeek/tabular'
  Bundle 'nelstrom/vim-visual-star-search'
  Bundle 'vim-scripts/ZoomWin'
  Bundle 'mileszs/ack.vim'
  Bundle 'michaeljsmith/vim-indent-object'

  " Colorschemes
  Bundle 'altercation/vim-colors-solarized.git'
  Bundle 'tpope/vim-vividchalk'
  Bundle 'vim-scripts/Zenburn'
  Bundle 'chriskempson/base16-vim'

  " Language support
  Bundle 'kchmck/vim-coffee-script'
  Bundle 'guns/vim-clojure-static'
  Bundle 'elixir-lang/vim-elixir'
  Bundle 'tpope/vim-endwise'
  Bundle 'tpope/vim-git'
  Bundle 'jnwhiteh/vim-golang'
  Bundle 'tpope/vim-haml'
  Bundle 'pangloss/vim-javascript'
  Bundle 'groenewege/vim-less'
  Bundle 'tpope/vim-markdown'
  Bundle 'mmalecki/vim-node.js'
  Bundle 'ajf/puppet-vim'
  Bundle 'tpope/vim-rails'
  Bundle 'tpope/vim-rake'
  Bundle 'skwp/vim-rspec'
  Bundle 'skalnik/vim-vroom'
  Bundle 'vim-ruby/vim-ruby'
  Bundle 'rosstimson/scala-vim-support'
  Bundle 'cakebaker/scss-syntax.vim'
  Bundle 'scrooloose/syntastic'
  Bundle 'tpope/vim-rbenv'
  Bundle 't9md/vim-ruby-xmpfilter'

  " Snippets are kind of languagey, but in own section
  " to make it clear snipmate depends on tlib and mw-utils.
  Bundle "MarcWeber/vim-addon-mw-utils"
  Bundle "tomtom/tlib_vim"
  Bundle 'garbas/vim-snipmate'
  Bundle 'honza/vim-snippets'

  " Lols
  Bundle 'koron/nyancat-vim'

  filetype plugin indent on     " required!
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" END VUNDLE CONFIG
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS
"
" Note: most typical defaults handled by tpope/vim-sensible
" see https://github.com/tpope/vim-sensible
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
set swapfile
set backup
set backupdir=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp
set undodir=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp
set directory=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp

set relativenumber

set nowrap       " don't wrap lines
set tabstop=2    " a tab is two spaces
set shiftwidth=2 " an autoindent (with <<) is two spaces
set expandtab    " use spaces, not tabs

set list         " Show invisible characters
let &listchars = "tab:>\ ,trail:\u2591,extends:\u2192,precedes:\u2190,nbsp:\u00b7"

set hlsearch     " highlight matches
set incsearch    " incremental searching
set ignorecase   " searches are case insensitive...
set smartcase    " ... unless they contain at least one capital letter

" show $ marker at the boundry of cw
set cpoptions+=$

" allow modified buffers to be hidden
set hidden

" exclusions from the autocomplete menu
set wildignore+=*/tmp/*

" mouse works in most terminal software we use...
set mouse=a

" change the cursor shape depending on mode
" see: http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Ensure the active split is at least 90 chars wide
set winwidth=90

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Quick ESC
imap kj <ESC>

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
nmap <silent> <F6> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>
imap <silent> <F6> <ESC>:set invpaste<CR>:set paste?<CR>

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" Insert the Ruby hashrocket with <c-l>
imap <c-l> <space>=><space>

" map j to gj and k to gk, so line navigation ignores line wrap
nmap j gj
nmap k gk

" make Y behave similarly to D and C
nnoremap Y y$

" delete trailing whitespace with F5
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Expand %% into the directory of the current file
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Emacs-like beginning and end of line.
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" Navigate splits more easily
map <C-h> <C-w>h
map <C-j> <C-w>j
map <c-k> <C-w>k
map <C-l> <C-w>l

" Disable match highlight
map <leader>l :nohlsearch<CR>

command! Q q " Bind :Q to :q
command! W w " Bind :W to :w
command! Qall qall

" Allow writing via sudo
cnoremap w!! w !sudo tee > /dev/null %

" NERDTree stuff
map <leader>n :NERDTreeToggle<CR>

" Fugitive mappings
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gp :Git push<cr>

" Use Marked.app to preview Markdown files...
" http://stackoverflow.com/questions/9212340/is-there-a-vim-plugin-for-preview-markdown-file
function! s:setupMarkup()
  nnoremap <leader>p :silent !open -a Marked.app '%:p'<cr>
endfunction

au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Mappings for vim-ruby-xmpfilter
autocmd FileType ruby nmap <buffer> <leader>m <Plug>(xmpfilter-mark)
autocmd FileType ruby xmap <buffer> <leader>m <Plug>(xmpfilter-mark)
autocmd FileType ruby imap <buffer> <leader>m <Plug>(xmpfilter-mark)
autocmd FileType ruby nmap <buffer> <leader>x <Plug>(xmpfilter-run)
autocmd FileType ruby xmap <buffer> <leader>x <Plug>(xmpfilter-run)
autocmd FileType ruby imap <buffer> <leader>x <Plug>(xmpfilter-run)



"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILE TYPES
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Some file types should wrap their text
function! s:setupWrapping()
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction

" Make sure all mardown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
au FileType markdown call s:setupWrapping()

" Treat JSON files like JavaScript
au BufNewFile,BufRead *.json set ft=javascript


"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STATUS LINE
" see: :help 'statusline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
set statusline=         "reset
set statusline+=%#todo# "set color
set statusline+=[       "open bracket char
set statusline+=%n      "buffer number
set statusline+=%M      "modifiable/modified flag
set statusline+=%R      "Readonly flag
set statusline+=%W      "Preview window flag
set statusline+=]%*     "close bracket & reset color
set statusline+=%<      "cut from here if line is too long
set statusline+=./%f    "relative path of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'wtf-enc'}\| "file encoding
set statusline+=%{&ff}\| "file format
set statusline+=%{strlen(&ft)?&ft:'zomg'}] "file encoding
set statusline+=%=      "left/right separator
"set statusline+=%{fugitive#statusline()}\  "git branch
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ (%P)  "escaped space, percent through file

