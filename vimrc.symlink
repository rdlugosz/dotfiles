set nocompatible               " be iMproved

filetype off                   " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

if exists(':Plugin')
  " let Vundle manage Vundle
  " required!
  Plugin 'gmarik/vundle'

  " Activate the built-in matchit.vim
  runtime macros/matchit.vim

  " The Tim Pope all-star collection
  Plugin 'tpope/vim-cucumber'
  Plugin 'tpope/vim-fugitive'
  Plugin 'tpope/vim-repeat'
  Plugin 'tpope/vim-sensible'
  Plugin 'tpope/vim-speeddating'
  Plugin 'tpope/vim-surround'
  Plugin 'tpope/vim-unimpaired'
  Plugin 'tpope/vim-eunuch'
  Plugin 'tpope/vim-commentary'

  " Interface enhancements
  Plugin 'jeetsukumaran/vim-buffergator'
  Plugin 'tpope/vim-characterize'
  Plugin 'kien/ctrlp.vim'
  if exists("*gettabvar")
    Plugin 'airblade/vim-gitgutter'
  endif
  Plugin 'scrooloose/nerdtree'
  Plugin 'godlygeek/tabular'
  Plugin 'nelstrom/vim-visual-star-search'
  Plugin 'vim-scripts/ZoomWin'
  Plugin 'mileszs/ack.vim'
  Plugin 'michaeljsmith/vim-indent-object'
  " Plugin 'bling/vim-airline'
  Plugin 'rdlugosz/vim-dragvisuals'
  Plugin 'mbbill/undotree'
  Plugin 'nathanaelkane/vim-indent-guides'
  Plugin 'wellle/targets.vim'

  " Colorschemes
  Plugin 'altercation/vim-colors-solarized.git'
  Plugin 'tpope/vim-vividchalk'
  Plugin 'vim-scripts/Zenburn'
  Plugin 'chriskempson/base16-vim'
  Plugin 'nanotech/jellybeans.vim'
  Plugin 'junegunn/seoul256.vim'
  Plugin 'tomasr/molokai'

  " Language support
  Plugin 'kchmck/vim-coffee-script'
  Plugin 'guns/vim-clojure-static'
  Plugin 'elixir-lang/vim-elixir'
  Plugin 'tpope/vim-endwise'
  Plugin 'tpope/vim-git'
  Plugin 'jnwhiteh/vim-golang'
  Plugin 'tpope/vim-haml'
  Plugin 'pangloss/vim-javascript'
  Plugin 'groenewege/vim-less'
  Plugin 'tpope/vim-markdown'
  Plugin 'mmalecki/vim-node.js'
  Plugin 'ajf/puppet-vim'
  Plugin 'tpope/vim-rails'
  Plugin 'tpope/vim-rake'
  Plugin 'skwp/vim-rspec'
  Plugin 'skalnik/vim-vroom'
  Plugin 'vim-ruby/vim-ruby'
  Plugin 'rosstimson/scala-vim-support'
  Plugin 'cakebaker/scss-syntax.vim'
  Plugin 'scrooloose/syntastic'
  Plugin 'tpope/vim-rbenv'
  Plugin 't9md/vim-ruby-xmpfilter'
  Plugin 'rizzatti/funcoo.vim'
  Plugin 'rizzatti/dash.vim'
  Plugin 'AndrewRadev/splitjoin.vim'
  Plugin 'ecomba/vim-ruby-refactoring'
  Plugin 'chrisbra/csv.vim'

  " Add a text object for Ruby blocks (ar / ir)
  Plugin 'kana/vim-textobj-user'
  Plugin 'nelstrom/vim-textobj-rubyblock'

  " Snippets are kind of languagey, but in own section
  " to make it clear snipmate depends on tlib and mw-utils.
  Plugin 'MarcWeber/vim-addon-mw-utils'
  Plugin 'tomtom/tlib_vim'
  Plugin 'garbas/vim-snipmate'
  Plugin 'honza/vim-snippets'

  " Lols
  Plugin 'koron/nyancat-vim'

  call vundle#end()
  filetype plugin indent on     " required!
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" END VUNDLE CONFIG
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETTINGS
"
" Note: most typical defaults handled by tpope/vim-sensible
" see https://github.com/tpope/vim-sensible
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set colorscheme
if $TERM =~ "-256color"
  set t_Co=256
endif
set background=dark
silent! colorscheme base16-default

set swapfile
set directory=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp

set backup
set backupdir=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp

if has('persistent_undo')
  set undodir=$TMPDIR,~/tmp,~/.vim/tmp,/tmp,/var/tmp
  set undofile
  set undoreload=10000
end
set undolevels=10000

set spelllang=en
set spellfile=$HOME/.vim/en.utf-8.add

if exists('+relativenumber')
  set relativenumber
end
set number       " set after rnu creates 'hybrid' line numbering mode

set lbr          " wrap at word boundaries (vs last char that fits)
set nowrap       " don't wrap lines (we map leader-W to toggle)
if exists('+breakindent')
  set breakindent " preserves the indent level of wrapped lines
  set showbreak=↪ " illustrate wrapped lines
  set wrap        " wrapping with breakindent is tolerable
endif

set tabstop=2    " a tab is two spaces
set shiftwidth=2 " an autoindent (with <<) is two spaces
set expandtab    " use spaces, not tabs

" When on first/last char in a line, allow left/right to navigate
" through to the prev/next line.
set whichwrap+=<,>,h,l

set list         " Show invisible characters
let &listchars = "tab:>-,trail:\u2591,extends:>,precedes:<,nbsp:\u00b7"
set sidescroll=1

set nohlsearch   " don't highlight matches
set incsearch    " incremental searching
set ignorecase   " searches are case insensitive...
set smartcase    " ... unless they contain at least one capital letter

set showcmd      " show commands as they are typed

" show $ marker at the boundary of cw
set cpoptions+=$

" allow modified buffers to be hidden
set hidden

" exclusions from the autocomplete menu
set wildignore+=*/tmp/*

" mouse works in most terminal software we use...
set mouse=a

" Tabline and Vim-CtrlSpace config
set showtabline=1
let g:ctrlspace_use_tabline = 1

" change the cursor shape depending on mode
" see: http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" The Silver Searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

  " Skip caching since ag is so fast
  let g:ctrlp_use_caching = 0

  " Use ag in ack.vim
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_full_redraws = 1

if &diff
  set wrap
endif

" Use par to reflow text
" see: http://vimcasts.org/episodes/formatting-text-with-par/
" Using `gw` will reflow with Vim's built-in algorithm.
if executable('par')
  set formatprg="par -h -w78 -B=.,\?_A_a "
endif

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Buffergator config
let g:buffergator_show_full_directory_path = 0
let g:buffergator_viewport_split_policy = 'T'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let spacebar double as our leader, for great justice
map <space> <leader>
map <space><space> <leader><leader>

" Quick ESC
imap kj <ESC>

" Reload our config
nmap <leader>~ :source ~/.vimrc<CR>:redraw<CR>:echo "~/.vimrc reloaded!"<CR>

" Write file
nmap <leader>w :w<CR>

" Close buffer
nmap <leader>q :bd<CR>

" Toggle spelling
nmap <leader>s :set invspell<CR>:set spell?<CR>

" Toggle wrap
nmap <leader>W :set invwrap<CR>:set wrap?<CR>

" Toggle Cursor Column
nmap <leader>c :set invcursorcolumn<CR>

" Toggle paste mode
nmap <leader>p :set invpaste<CR>:set paste?<CR>
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" upper/lower word
nmap <leader>U mQviwU`Q
nmap <leader>L mQviwu`Q

" Insert the Ruby hashrocket with <c-l>
imap <c-l> <space>=><space>

" Reindent the entire file
nmap <leader>= gg=G``:echo "reindent global"<CR>

" map j to gj and k to gk, so line navigation ignores line wrap
nmap j gj
nmap k gk

" make Y behave similarly to D and C
nnoremap Y y$

" delete trailing whitespace with F5
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Expand %% into the directory of the current file
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Emacs-like beginning and end of line.
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" Navigate splits more easily
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Key repeat hack for resizing splits, i.e., <C-w>+++- vs <C-w>+<C-w>+<C-w>-
" see: http://www.vim.org/scripts/script.php?script_id=2223
nmap <C-w>+ <C-w>+<SID>ws
nmap <C-w>- <C-w>-<SID>ws
nmap <C-w>> <C-w>><SID>ws
nmap <C-w>< <C-w><<SID>ws
nn <script> <SID>ws+ <C-w>+<SID>ws
nn <script> <SID>ws- <C-w>-<SID>ws
nn <script> <SID>ws> <C-w>><SID>ws
nn <script> <SID>ws< <C-w><<SID>ws
nmap <SID>ws <Nop>


" Toggle match highlight
map <leader>l :set invhlsearch<CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

command! Q q " Bind :Q to :q
command! W w " Bind :W to :w
command! Qall qall

" Allow writing via sudo
cnoremap w!! w !sudo tee > /dev/null %

" NERDTree stuff
map <leader>n :NERDTreeToggle<CR>
let NERDTreeHijackNetrw=1

" UndoTree
nmap <leader>u :UndotreeToggle<CR>

" Fugitive mappings
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gp :Git push<cr>

" Mac OS X-only mappings
if has("unix")
  let s:uname = system("uname -s")
  if s:uname == "Darwin\n"
    " Search for word under cursor in Dash.app
    nmap <leader>d <Plug>DashSearch
    nmap <leader>D <Plug>DashGlobalSearch

    " Use Marked.app to preview Markdown files...
    " http://stackoverflow.com/questions/9212340/is-there-a-vim-plugin-for-preview-markdown-file
    function! s:setupMarkup()
      nnoremap <leader>M :silent !open -a Marked.app '%:p'<CR>:redraw!<CR>
    endfunction

    au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()
  endif
endif

" Mappings for vim-ruby-xmpfilter
if executable('xmpfilter')
  autocmd FileType ruby nmap <buffer> <leader>m <Plug>(xmpfilter-mark)
  autocmd FileType ruby xmap <buffer> <leader>m <Plug>(xmpfilter-mark)
  autocmd FileType ruby imap <buffer> <leader>m <Plug>(xmpfilter-mark)
  autocmd FileType ruby nmap <buffer> <leader>x <Plug>(xmpfilter-run)
  autocmd FileType ruby xmap <buffer> <leader>x <Plug>(xmpfilter-run)
  autocmd FileType ruby imap <buffer> <leader>x <Plug>(xmpfilter-run)
endif

" enable spell checking on certain files
autocmd BufNewFile,BufRead COMMIT_EDITMSG set spell

" Key mappings for vim-dragvisuals
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')

" ---------------
" Tabular
" ---------------
nnoremap <Leader>t= :Tabularize assignment<CR>
vnoremap <Leader>t= :Tabularize assignment<CR>
nnoremap <Leader>t: :Tabularize symbol<CR>
vnoremap <Leader>t: :Tabularize symbol<CR>
nnoremap <Leader>t, :Tabularize comma<CR>
vnoremap <Leader>t, :Tabularize comma<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILE TYPES
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Some file types should wrap their text
function! s:setupWrapping()
  set wrap
  set linebreak
  set textwidth=72
  set nolist
endfunction

" Make sure all mardown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
au FileType markdown call s:setupWrapping()

" Treat JSON files like JavaScript
au BufNewFile,BufRead *.json set ft=javascript

"====[ Make the 81st column stand out ]====================

" just the 81st column of wide lines...
" highlight ColorColumn ctermbg=magenta
" call matchadd('ColorColumn', '\%81v', 100)

"=====[ Highlight matches when jumping to next ]=============

" This rewires n and N to do the highlighing...
nnoremap <silent> n   nzz:call HLNext(0.2)<cr>
nnoremap <silent> N   Nzz:call HLNext(0.2)<cr>

function! HLNext (blinktime)
  highlight WhiteOnRed ctermfg=white ctermbg=red
  let [bufnum, lnum, col, off] = getpos('.')
  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
  let target_pat = '\c\%#'.@/
  let ring = matchadd('WhiteOnRed', target_pat, 101)
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  call matchdelete(ring)
  redraw
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STATUS LINE
" see: :help 'statusline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
set statusline=         "reset
set statusline+=%#todo# "set color
set statusline+=[       "open bracket char
set statusline+=%n      "buffer number
set statusline+=%M      "modifiable/modified flag
set statusline+=%R      "Readonly flag
set statusline+=%W      "Preview window flag
set statusline+=]%*     "close bracket & reset color
set statusline+=%<      "cut from here if line is too long
set statusline+=./%f    "relative path of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'wtf-enc'}\| "file encoding
set statusline+=%{&ff}\| "file format
set statusline+=%{strlen(&ft)?&ft:'zomg'}] "file encoding
set statusline+=%=      "left/right separator
set statusline+=%{fugitive#statusline()}\  "git branch
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ (%P)  "escaped space, percent through file
